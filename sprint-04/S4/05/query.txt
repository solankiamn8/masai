// models/movie.js
const mongoose = require("mongoose");
const movieSchema = new mongoose.Schema({
  _id: String,
  title: String,
  genre: String,
  releaseYear: Number,
  durationMins: Number,
});
module.exports = mongoose.model("Movie", movieSchema);

// models/user.js
const mongoose = require("mongoose");
const userSchema = new mongoose.Schema({
  _id: String,
  name: String,
  email: String,
  joinedAt: Date,
});
module.exports = mongoose.model("User", userSchema);

// models/booking.js
const mongoose = require("mongoose");
const bookingSchema = new mongoose.Schema({
  _id: String,
  userId: String,
  movieId: String,
  bookingDate: Date,
  seats: Number,
  status: String,
});
module.exports = mongoose.model("Booking", bookingSchema);

// routes/api.js
const express = require("express");
const Movie = require("../models/movie");
const User = require("../models/user");
const Booking = require("../models/booking");
const router = express.Router();

// --- POST routes ---
router.post("/movies", async (req, res) => {
  try {
    const movie = await Movie.create(req.body);
    res.status(200).json(movie);
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
});

router.post("/users", async (req, res) => {
  try {
    const user = await User.create(req.body);
    res.status(200).json(user);
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
});

router.post("/bookings", async (req, res) => {
  try {
    const { userId, movieId } = req.body;
    const userExists = await User.findById(userId);
    const movieExists = await Movie.findById(movieId);
    if (!userExists || !movieExists) {
      return res.status(400).json({ error: "Invalid userId or movieId" });
    }
    const booking = await Booking.create(req.body);
    res.status(200).json(booking);
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
});

// --- Aggregation routes ---
// 1. Movie Bookings (total bookings & seats per movie)
router.get("/analytics/movie-bookings", async (req, res) => {
  try {
    const result = await Booking.aggregate([
      {
        $group: {
          _id: "$movieId",
          totalBookings: { $sum: 1 },
          totalSeats: { $sum: "$seats" },
        },
      },
      {
        $lookup: {
          from: "movies",
          localField: "_id",
          foreignField: "_id",
          as: "movie",
        },
      },
      { $unwind: "$movie" },
      {
        $project: {
          _id: 0,
          movieTitle: "$movie.title",
          totalBookings: 1,
          totalSeats: 1,
        },
      },
    ]);
    res.status(200).json(result);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// 2. User Bookings (history with movie titles)
router.get("/analytics/user-bookings", async (req, res) => {
  try {
    const result = await Booking.aggregate([
      {
        $lookup: {
          from: "users",
          localField: "userId",
          foreignField: "_id",
          as: "user",
        },
      },
      { $unwind: "$user" },
      {
        $lookup: {
          from: "movies",
          localField: "movieId",
          foreignField: "_id",
          as: "movie",
        },
      },
      { $unwind: "$movie" },
      {
        $group: {
          _id: "$userId",
          userName: { $first: "$user.name" },
          bookings: {
            $push: {
              movieTitle: "$movie.title",
              seats: "$seats",
              bookingDate: "$bookingDate",
              status: "$status",
            },
          },
        },
      },
    ]);
    res.status(200).json(result);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// 3. Top Users (> 2 bookings)
router.get("/analytics/top-users", async (req, res) => {
  try {
    const result = await Booking.aggregate([
      {
        $group: {
          _id: "$userId",
          totalBookings: { $sum: 1 },
        },
      },
      { $match: { totalBookings: { $gt: 2 } } },
      {
        $lookup: {
          from: "users",
          localField: "_id",
          foreignField: "_id",
          as: "user",
        },
      },
      { $unwind: "$user" },
      {
        $project: {
          _id: 0,
          userName: "$user.name",
          totalBookings: 1,
        },
      },
    ]);
    res.status(200).json(result);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// 4. Genre-wise Bookings (total seats)
router.get("/analytics/genre-wise-bookings", async (req, res) => {
  try {
    const result = await Booking.aggregate([
      {
        $lookup: {
          from: "movies",
          localField: "movieId",
          foreignField: "_id",
          as: "movie",
        },
      },
      { $unwind: "$movie" },
      {
        $group: {
          _id: "$movie.genre",
          totalSeats: { $sum: "$seats" },
        },
      },
      {
        $project: {
          _id: 0,
          genre: "$_id",
          totalSeats: 1,
        },
      },
    ]);
    res.status(200).json(result);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// 5. Active Bookings ("Booked" status)
router.get("/analytics/active-bookings", async (req, res) => {
  try {
    const result = await Booking.aggregate([
      { $match: { status: "Booked" } },
      {
        $lookup: {
          from: "users",
          localField: "userId",
          foreignField: "_id",
          as: "user",
        },
      },
      { $unwind: "$user" },
      {
        $lookup: {
          from: "movies",
          localField: "movieId",
          foreignField: "_id",
          as: "movie",
        },
      },
      { $unwind: "$movie" },
      {
        $project: {
          _id: 0,
          userName: "$user.name",
          movieTitle: "$movie.title",
          seats: 1,
          bookingDate: 1,
        },
      },
    ]);
    res.status(200).json(result);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

module.exports = router;
