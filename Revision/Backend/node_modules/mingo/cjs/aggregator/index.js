var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var aggregator_exports = {};
__export(aggregator_exports, {
  Aggregator: () => Aggregator
});
module.exports = __toCommonJS(aggregator_exports);
var import_core = require("../core");
var import_match = require("../operators/pipeline/match");
var import_project = require("../operators/pipeline/project");
var import_sort = require("../operators/pipeline/sort");
var import_internal = require("./_internal");
class Aggregator extends import_internal.AggregatorImpl {
  /**
   * Creates an instance of the Aggregator class.
   *
   * @param pipeline - An array of objects representing the aggregation pipeline stages.
   * @param options - Optional configuration settings for the aggregator.
   */
  constructor(pipeline, options) {
    const opts = (0, import_core.initOptions)(options);
    opts.context.addPipelineOps({ $match: import_match.$match, $project: import_project.$project, $sort: import_sort.$sort });
    super(pipeline, opts);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Aggregator
});
